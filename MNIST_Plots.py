import numpy as np
import matplotlib.pyplot as plt 

def plot_training_results(fake_sig,true_sig,test_noise_size, erreur_discrim_sur_true,gradient):
    
    n_it = len(gradient)
    
    ##################################
    # Plot true and fake signatures. #          
    ##################################
    
    f,ax = plt.subplots(figsize=(25,10))

    ax.set_title("True signatures vs. signatures generated by WGAN ("+str(n_it)+" iterations)",fontsize='xx-large')

    for i in np.arange(test_noise_size):

        plt.plot(fake_sig[i,:],c="blue",alpha=0.5, label='Generated data' if i==0 else None)

    
    for i in np.arange(len(true_sig)): 
    
        plt.plot(true_sig[i],c="red",alpha=0.4,label = 'True data'if i==0 else None)
    
    plt.legend()
    plt.show()

    points = np.arange(0,n_it)

    erreur_discrim_sur_true = np.array(erreur_discrim_sur_true)

    gradient = np.array(gradient)
    
    #############################################################
    # Plot Wasserstein distance estimated by the discriminator. #          
    #############################################################

    f,ax = plt.subplots(figsize=(25,10))
    ax.set_title("Wasserstein distance, as computed by discriminator ("+str(n_it)+" iterations)",fontsize='xx-large')
    ax.scatter(x=points,y=erreur_discrim_sur_true,alpha=0.5)
    
    plt.show()

    #######################################################################
    # Plot the norm of the discriminator's gradient. Should go towards 1. #
    #######################################################################
    
    f,ax = plt.subplots(figsize=(25,10))
    ax.scatter(points,gradient,alpha=0.5)
    ax.set_title("Norm of the discriminator gradient ("+str(n_it)+" iterations)",fontsize='xx-large')
    plt.show()
    
   